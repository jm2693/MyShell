Jason Merchan - jm2693
Daniel Li - dal273


Description:
this program is a simple shell implementation in C. it allows users to execute commands, handle input/output redirection, implement wildcard expansion, and support piping. the shell supports built-in commands such as cd, pwd, which, and exit.

What The Program Must Do:
    - Run in Interactive Mode 
        - No arguments (not including program name)
        - print "mysh> " at every line (not including external command output)
        - welcome and exit sequence
            - "exit" built-in
    - Run in Bash Mode
        - ONE argument (not including program name)
    -Both:
        - WILDCARDS
        - PIPING
        - REDIRECTING 
        - CONDITIONALS
        - BUILT-INS
            - exit
            - cd
            - pwd
            - which
        - BARENAMES
        - PATHNAMES

Design:
    - We use isatty(STDIN_FILENO) to determine if it should run in interactive or batch mode
    - number of args is used to determine the welcome and exit screen
    - run_shell() creates an infinite loop which runs for both modes. it ends either when the user types 
        - "exit" (interactive) or the input ends (batch)
        - the loop reads in the line looking for '\n'
        - it tokenizes the line using strtok()
        - a sequence of if, else if statements handle redirection, piping, conditionals, and built-ins
            - handle_piping() function takes care of piping. 
        - redirection and piping have their own call to execute_command since they change input and output
    - execute_command (where the magic happens!)
        - if the first argument in args contains a slash character ('/'), it assumes it's a path to an executable file.
        - it forks a child process to execute the command.
        - if input/output redirection is specified (input_fd or output_fd not equal to STDIN_FILENO or STDOUT_FILENO, respectively)
                it redirects the standard input/output accordingly using dup2.
        - it executes the command using execv.
        - if execv returns, indicating an error, it prints an error message using perror and exits the child process with a failure 
                status.
        - in the parent process, it waits for the child process to complete using waitpid.
        - if the child process exits normally (using WIFEXITED), it retrieves the exit status of the child using WEXITSTATUS.
        - if the child process exits with a status of 0, indicating success, it returns the exit status.
        - if none of the paths were successful in finding the executable, it prints a "Command not found" message and returns an   
                exit status of 1.
    - this exit_status is used to determine conditionals and exit status of the program itself

NOTES:
    - in testing files in interactive mode: #!/bin/bash in required at the top of each sh file, batch mode requires
            this not be in the file
    - pressing a blank enter in interactive mode will exit the program 
    - there is an assumption that only one '|' '<' '>' will be made per call
    - certain cases such as conditionals within sh files were meant to have the same output as zsh shell